import { testThreshold } from "../constants";
import { TestCase } from "../types";
import chalk from "chalk";

/**
 * Possible test results.
 */
export enum testResult {
  PASS = "PASS",
  WARN = "WARN",
  FAIL = "FAIL",
}

/**
 * Generate a test report for a test case.
 * @param testCase The test case.
 * @param review The review generated by the AI.
 * @param similarReview The most similar review found in the vector store.
 * @param similarity The similarity score between the review and the most similar review found in the vector store.
 * @returns The test report and the test result.
 */
export const generateTestReport = (
  testCase: TestCase,
  review: string,
  similarReview: string,
  similarity: number
): { report: string; result: testResult } => {
  // If the similarity score is more than 1 - threshold, then the test is considered as passing.
  // Else if the similarity score is more than 1 - 2 * threshold, then the test is considered as warn. We display a complete report for this test but do not fail the test.
  // Else, the test is considered as failing. We display a complete report for this test and fail the test.
  if (similarity > 1 - testThreshold) {
    return {
      result: testResult.PASS,
      report: chalk.green(
        `[PASS] - Test case: ${testCase.name} - Similarity score: ${similarity}\n`
      ),
    };
  } else if (similarity > 1 - 2 * testThreshold) {
    return {
      result: testResult.WARN,
      report:
        chalk.yellow(
          `[WARN] - Test case: ${testCase.name} - Similarity score: ${similarity}\n`
        ) + testReportTemplate(testCase, review, similarReview, similarity),
    };
  } else {
    return {
      result: testResult.FAIL,
      report:
        chalk.red(
          `[FAIL] - Test case: ${testCase.name} - Similarity score: ${similarity}\n`
        ) + testReportTemplate(testCase, review, similarReview, similarity),
    };
  }
};

/**
 * Generate a test report template for a test case.
 * @param testCase The test case.
 * @param review The review generated by the AI.
 * @param similarReview The most similar review found in the vector store.
 * @param similarity The similarity score between the review and the most similar review found in the vector store.
 * @returns The test report template.
 */
const testReportTemplate = (
  testCase: TestCase,
  review: string,
  similarReview: string,
  similarity: number
) => `
 > Test case description: ${testCase.description}

 > Test case snippet: ${testCase.snippet}

===============================================================================

 > Review:
${review}
===============================================================================

> Similar review:
${similarReview}
===============================================================================

 > Similarity score: ${similarity}

`;

/**
 * Generate a summary line for a test result.
 * @param testName The name of the test case.
 * @param result The test result.
 * @returns The summary line.
 */
const summaryLineForTestResult = (testName: string, result: testResult) => {
  switch (result) {
    case testResult.PASS:
      return chalk.green(`[PASS] - Test case: ${testName}`);
    case testResult.WARN:
      return chalk.yellow(`[WARN] - Test case: ${testName}`);
    case testResult.FAIL:
      return chalk.red(`[FAIL] - Test case: ${testName}`);
  }
};

/**
 * Generate a summary of the test results.
 * @param testResults The test results.
 * @returns The summary.
 */
export const generateTestResultsSummary = (testResults: {
  [key: string]: testResult;
}): string => {
  const { detailedSummary: detailedSummary, counts } = Object.entries(
    testResults
  ).reduce(
    (summary, [testCaseName, result]) => {
      return {
        detailedSummary:
          summary.detailedSummary +
          summaryLineForTestResult(testCaseName, result) +
          "\n",
        counts: { ...summary.counts, [result]: summary.counts[result] + 1 },
      };
    },
    {
      detailedSummary: chalk.blue(`\n### Test results summary:\n`),
      counts: { PASS: 0, WARN: 0, FAIL: 0 },
    }
  );

  return (
    detailedSummary +
    `\n**SUMMARY: ${chalk.green(`✅ PASS: ${counts.PASS}`)}, ${chalk.yellow(
      `⚠️ WARN: ${counts.WARN}`
    )}, ${chalk.red(`❌ FAIL: ${counts.FAIL}`)}**\n`
  );
};
